// ================================================================================
// 								Creating Randomisers
// ================================================================================

Randomisers work by specifying a list of object collections as inputs and outputs. Inputs are specified with SwitchLink, while outputs use ~SwitchLink
Randomisers will randomise items in the input collections, and the items appear in the outputs specified by the output collections.

//Inputs
+Link "rndHallwayObjects" "rndControlWeaponRandomiser" "SwitchLink"
{
}
+Link "rndCommandControlObjects" "rndControlWeaponRandomiser" "SwitchLink"
{
}

//Outputs
+Link "rndHallwayObjects" "rndControlWeaponRandomiser" "~SwitchLink"
{
}
+Link "rndCommandControlObjects" "rndControlWeaponRandomiser" "~SwitchLink"
{
}


// ================================================================================
// 								Randomiser Features
// ================================================================================

Randomisers support a number of features, which can be configured using the Design Note property via DML.

Here's an example of a configured randomiser:

Create "rndComplexRandomiser" "rndExampleRandomiser"
{
	+ObjProp "DesignNoteSS" = "allowedTypes0=-12; priority=1; variedOutput=0; maxTimes=2; minTimes=0"
}

==Features==

allowedTypes

allowedTypes is an array, and must be followed by a number (such as allowedTypes0, allowedTypes1 etc).
By specifying a series of allowed types, a randomiser can be configured to only randomise inputs which are of a certain archetype.
In this case, only weapons (-12) will be randomised.

This allows a subset of items to be randomised without having to manually add them to a new object collection,
and containers which contain multiple types of objects will only have the relevant items affected.

priority

By default, all randomisers have a priority of 0. By specifying a higher number, a randomiser can raise it's priority.
This is useful when multiple randomisers are working on the same objects.

For example, in MedSci1, a number of body bags are randomised, and can only contain hypos. These hypos are pulled from all the items in the map.
At the same time, a randomiser exists to allow all the items in the map to be randomised.
If they both run at the same priority, the map randomiser can "steal" items from the bodybags, meaning they will most likely be empty.
By configuring the body bag randomiser to have a priority higher than the general map randomiser, hypos can be "stolen" from around the map and placed in body bags,
but not the other way around.

variedOutput

By default, randomisers will fill outputs by giving them a chance to