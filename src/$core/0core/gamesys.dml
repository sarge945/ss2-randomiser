// ================================================================================
// 								Basic Metaprops
// ================================================================================

//Attached to all Inputs
CreateArch "Misc Metaprops" "Object Randomiser Input"
{
	+ObjProp "Scripts"
	{
		"Script 0" "rndInput"
		"Don't inherit" false
	}
}

//Attached to all Outputs
CreateArch "Misc Metaprops" "Object Randomiser Output"
{
	+ObjProp "Scripts"
	{
		"Script 0" "rndOutput"
		"Don't inherit" false
	}
}


// ================================================================================
// 						Metaprops to control Output Types
// ================================================================================

//Shorthand for an output designed to go in a small nook or under stuff, etc
//Only allows small objects (hypos, softs, implants, CMs etc)
CreateArch "Misc Metaprops" "Object Randomiser - Small Item Output"
{
	+ObjProp "DesignNoteSS" = "allowedTypes0=-52;allowedTypes1=-53;allowedTypes2=-54;allowedTypes3=-56;allowedTypes4=-57;allowedTypes5=-58;allowedTypes6=-59;allowedTypes7=-61;allowedTypes8=-320;allowedTypes9=-99;allowedTypes10=-938;allowedTypes11=-73;allowedTypes12=-1488;allowedTypes13=-2949"
}

//Shorthand for a Body Bag output
CreateArch "Misc Metaprops" "Object Randomiser - Body Bag Output"
{
	+ObjProp "DesignNoteSS" = "allowedTypes0=-52;allowedTypes1=-53;allowedTypes2=-54;allowedTypes3=-56;allowedTypes4=-57;allowedTypes5=-58;allowedTypes6=-59;allowedTypes7=-61;allowedTypes8=-85"
}

//Shorthand for a Hypo Only
CreateArch "Misc Metaprops" "Object Randomiser - Hypo Output"
{
	+ObjProp "DesignNoteSS" = "allowedTypes0=-52;allowedTypes1=-53;allowedTypes2=-54;allowedTypes3=-56;allowedTypes4=-57;allowedTypes5=-58;allowedTypes6=-59;allowedTypes7=-61;"
}

//Shorthand for Ammo only
CreateArch "Misc Metaprops" "Object Randomiser - Ammo Output"
{
	+ObjProp "DesignNoteSS" = "allowedTypes0=-35;allowedTypes1=-45;allowedTypes2=-34;"
}

// ================================================================================
// 								Randomiser Types
// ================================================================================

//Object Pool
//SwitchLink to a Randomiser to have all linked Targets added as inputs
//~SwitchLink to a Randomiser to have all linked Targets added as outputs
CreateArch "Marker" "rndObjectCollection"
{
}


//Super simple randomiser
//Has NO checking, messages etc.
//Simply moves all inputs to outputs.
//Treats all Targets as inputs, and ~Targets as outputs
CreateArch "Marker" "rndSimpleRandomiser"
{
	+ObjProp "Scripts"
	{
		"Script 0" "rndSimpleRandomiser"
		"Don't inherit" false
	}
}

//Same as standard Randomiser, but uses SwitchLinks to add ObjectCollections as inputs and outputs
CreateArch "Marker" "rndComplexRandomiser"
{
	+ObjProp "Scripts"
	{
		"Script 0" "rndComplexRandomiser"
		"Don't inherit" false
	}
}

//"Replacer" Randomiser. Replaces each Output with a random one of it's allowed types
//Has no inputs
CreateArch "Marker" "rndReplacerRandomiser"
{
	+ObjProp "Scripts"
	{
		"Script 0" "rndReplacerRandomiser"
		"Don't inherit" false
	}
}

// ================================================================================
// 								Output Types
// ================================================================================

//Marker output
//Link this to an Item Pool and it will behave like any regular output
CreateArch "Marker" "rndOutputMarker"
{
	+ObjProp "Scripts"
	{
		"Script 0" "rndOutput"
		"Don't inherit" false
	}
}

////Special Outputs

//Designed to do special handling for certain objects as they are randomised
//Will also copy over and recreate the object's SwitchLinks
CreateArch "Marker" "rndSwitchLinkOutputHandler"
{
	+ObjProp "Scripts"
	{
		"Script 0" "rndSwitchLinkHandler"
		"Don't inherit" false
	}
}



// ================================================================================
// 						Complex Randomiser Shorthands
//					These simply configure complex randomisers
// ================================================================================

CreateArch "rndComplexRandomiser" "rndCrateRandomiser"
{
	+ObjProp "DesignNoteSS" = "ignorePriority=1; variedOutput=0; addAllowedTypes0=-12; addAllowedTypes1=-78"
}

CreateArch "rndComplexRandomiser" "rndWeaponRandomiser"
{
	+ObjProp "DesignNoteSS" = "allowedTypes0=-12; ignorePriority=1; noSecret=1; variedOutput=0; priority=1; noItemOutput=1"
}

CreateArch "rndComplexRandomiser" "rndArmourRandomiser"
{
	+ObjProp "DesignNoteSS" = "allowedTypes0=-78; ignorePriority=1; noSecret=1; variedOutput=0; priority=1; noItemOutput=1"
}

CreateArch "rndComplexRandomiser" "rndPowercellRandomiser"
{
	+ObjProp "DesignNoteSS" = "allowedTypes0=-1862; ignorePriority=1; noSecret=1; variedOutput=0; priority=1;"
}

CreateArch "rndComplexRandomiser" "rndAudioLogRandomiser"
{
	+ObjProp "DesignNoteSS" = "allowedTypes0=-76; noCorpse=1; noRespectJunk=0 noSecret=1; noHighPriority=1; variedOutput=0; priority=1;"
}


// ================================================================================
// 							Metaprops to control item distribution
//
//							These don't do anything on their own,
//				but signal to the Randomiser that certain things should be done
//									with a given object
// ================================================================================

//Prevent an object or the objects inside a container from being added automatically
CreateArch "Misc Metaprops" "Object Randomiser - No Auto Input"
{
}

//Prevent a world-object from automatically creating a marker
//This means that the object will not be replaced. It will appear somewhere else only.
CreateArch "Misc Metaprops" "Object Randomiser - No Auto Output"
{
}

//Prevent an item from being created at a marker, it can only be added to containers
//If it has Output Self Only, it can still appear at it's original location.
CreateArch "Misc Metaprops" "Object Randomiser - Container Only"
{
}

//Set a particular output to be "high priority" - it will be filled with items first
//Also implies No Junk, unless Junk Only is set
CreateArch "Misc Metaprops" "Object Randomiser - High Priority Output"
{
}

//Set a physical output to only accept itself as an input. This is used for objects which have been placed in specific places.
//Gives them a chance to be there or not. Either the original object will be where it was, or nothing will be there.
//Implies No Auto Output
CreateArch "Misc Metaprops" "Object Randomiser - Output Self Only"
{
}

//Use this for spots next to corpses
//These outputs will not allow audio logs as they will imply the log belonged to the corpse
CreateArch "Misc Metaprops" "Object Randomiser - No Logs"
{
}

//Use this for somewhat valuable spots.
//These outputs will not allow "junk" items (magazines, mugs etc) as they are considered to be valuable spots
//Please note that randomisers with noSecret=1 will still use these outputs - they are not hidden, only valuable
CreateArch "Misc Metaprops" "Object Randomiser - No Junk"
{
}

//Use this for junk.
//These spots will only allow junk. Use for bars, etc.
//Cancelled out by Secret
//If used with High-Priority Output, will cancel out it's "No Junk" rule, and only allow junk
//If used with Secret output, will cancel out it's "No Junk" rule, and only allow junk
CreateArch "Misc Metaprops" "Object Randomiser - Junk Only"
{
}

//Use this for particularly devious spots. Randomisers set to noSecret=1 won't use them.
//Use for making things like key items not be super hidden and block progress
//It's also useful for highly dangerous areas, like near turrets, to stop key items being placed in insanely hard locations
//These outputs will also not allow "junk" items (magazines, mugs etc) as they are considered to be valuable spots,
//Unless you use Junk Only, which counteracts that setting
CreateArch "Misc Metaprops" "Object Randomiser - Secret"
{
}

//Most items are "jiggled" into place, by being spawned slightly above the original object location
//This prevents large items (ie nanites) from falling through the floor when replacing smaller items like hypos.
//However, this also means the player can visually see the item "fall" when starting the map, if within eyesight.
//Some items, like the first vodka bottle in eng1, are visible almost instantly when starting a new map, and this setting exists
//to give an output a more smooth transition and so spawned items look less obviously like they are "falling" when starting the map.
CreateArch "Misc Metaprops" "Object Randomiser - No Position Fix"
{
}

//Some items are placed very specifically in the map, and this prevents newly created items from being able to move at all
//They are essentially frozen in place.
CreateArch "Misc Metaprops" "Object Randomiser - Freeze"
{
}
